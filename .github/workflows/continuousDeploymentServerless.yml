name: Continuous Deployment Serverless

on:
  workflow_call:
    inputs:
      DEV_INSTANCE:
        description: 'The instance where to deploy the code on dev.
          Example: dev-hes'
        required: true
        type: string
      PROD_INSTANCES:
        description: 'The instances where to deploy the code on prod.
          Needs to be a comma separated list.
          Example: prod, dev-hes'
        required: true
        type: string
      MUTATION_TEST:
        description: 'Run all unit tests again with stryker.'
        required: false
        default: false
        type: boolean
      SONAR_ANALYSIS:
        description: 'Run sonar analysis.'
        required: true
        default: true
        type: boolean
    secrets:
      SERVERLESS_TOKEN:
        description: 'The token used to access your serverless instance.
          Managed by Doppler'
        required: true
      BIT_TOKEN:
        description: 'The token used to access your bit.dev instance.
          Managed by Doppler'
        required: false
      SONARCLOUD_TOKEN:
        description: 'The token used to upload the scan results to Sonarcloud.
                      Managed by Doppler'
        required: true

jobs:
  buildAndTest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        id: cache-node-modules
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          # cache: 'npm'

      - name: Build and Test App
        run: |
          npm run pre-install --if-present
          npm ci
          npm run test
        env:
          BIT_TOKEN: ${{ secrets.BIT_TOKEN }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_TOKEN }}

      - name: Check and validate eslint
        run: |
          npm ci
          npm run lint:validate --if-present
        env:
          BIT_TOKEN: ${{ secrets.BIT_TOKEN }}

      - name: Build and run stryker mutation test
        if: ${{ inputs.MUTATION_TEST == 'true' }}
        run: |
          npm ci
          npm run test:mutation
        env:
          BIT_TOKEN: ${{ secrets.BIT_TOKEN }}

      - name: Get organization as lowercase
        id: lowercase_organization
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository_owner }}

      - name: Set the generated Sonar config
        id: set_sonar_values
        run: |
          GITHUB_REPOSITORY=${{ github.repository }}
          GITHUB_REPOSITORY="${GITHUB_REPOSITORY//'/'/'_'}"
          echo "::set-output name=sonar_organization::${{ steps.lowercase_organization.outputs.lowercase }}"
          echo "::set-output name=sonar_project::$GITHUB_REPOSITORY"

      - uses: sonarsource/sonarcloud-github-action@master
        if: ${{ inputs.SONAR_ANALYSIS }}
        name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          SONAR_ORGANIZATION: ${{ steps.set_sonar_values.outputs.sonar_organization }}
          SONAR_PROJECT_KEY: ${{ steps.set_sonar_values.outputs.sonar_project }}

      - name: SonarQube Quality Gate check
        if: ${{ inputs.SONAR_ANALYSIS }}
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
          SONAR_ORGANIZATION: ${{ steps.set_sonar_values.outputs.sonar_organization }}
          SONAR_PROJECT_KEY: ${{ steps.set_sonar_values.outputs.sonar_project }}

  deployDev:
    runs-on: ubuntu-latest
    needs: [buildAndTest]
    if: "!contains(github.event.head_commit.message, '--skip-ci') && github.event_name == 'push' && github.ref_name != 'main'"

    steps:
      - name: Checkout source code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Setup Node.js
        id: cache-node-modules
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          # cache: 'npm'

      - name: deploy to ${{ inputs.DEV_INSTANCE }}
        run: |
          echo "Deploying to ${{ inputs.DEV_INSTANCE }}"
          npm run pre-install --if-present
          npm ci
          npx cloud deploy ${{ inputs.DEV_INSTANCE }}
        env:
          BIT_TOKEN: ${{ secrets.BIT_TOKEN }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_TOKEN }}

  deployProd:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout source code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Setup Node.js
        id: cache-node-modules
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          # cache: 'npm'

      - name: deploy to ${{ inputs.PROD_INSTANCES }}
        run: |
          npm run pre-install --if-present
          npm ci
          IFS="," read -a instances <<< ${{ inputs.PROD_INSTANCES }}
          for index in "${!instances[@]}"
          do
            echo "Deploying to ${instances[index]}"
            npx cloud promote ${{ inputs.DEV_INSTANCE }} ${instances[index]}
          done
          echo "Successfully deployed to all instances"
        env:
          BIT_TOKEN: ${{ secrets.BIT_TOKEN }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_TOKEN }}
